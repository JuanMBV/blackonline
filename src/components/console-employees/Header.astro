---
const location = Astro.request.url.split('/').pop();

const id = Astro.url.searchParams.get('id');

let employee

if(id){
  employee = await fetch(`https://api.blackonline.juanmbv.site/api/employees/${id}`,{
  method: 'GET',
  headers: {
    'Content-Type': 'application/json'
  }
  }).then(res => {
    if(!res.ok){

      throw new Error('Error al obtener los datos del empleado')
      // Aqui hay que redirigir a una pagina de error
    }
    return res.json()
  }).then(data => {
    return data
  })
}

const ROUTES = [
  {
    name: 'Inventario',
    route: `/employee/console/inventory?id=${id}`,
    color: location === `inventory?id=${id}` ? 'text-[#6FD0DD]' : 'text-white hover:text-[#6FD0DD]'
  },
  {
    name: 'Agregar material',
    route: `/employee/console/add-material?id=${id}`,
    color: location === `add-material?id=${id}` ? 'text-[#6FD0DD]' : 'text-white hover:text-[#6FD0DD]'
  },
  {
    name: 'Pedidos',
    route:  `/employee/console/orders?id=${id}`,
    color: location === `orders?id=${id}` ? 'text-[#6FD0DD]' : 'text-white hover:text-[#6FD0DD]'
  }
];

const SIDE_MENU = [
  {
    name: "Información del empleado",
    route: "/employee/console/employee",
    role: [
      "Administrador",
      "Empleado"
    ],
    color: "hover:text-[#6FD0DD] text-black"
  },
  {
    name: "Registrar un empleado",
    route: "/employee/register",
    role: [
      "Administrador"
    ],
    color: "hover:text-[#6FD0DD] text-black"
  },
  {
    name: "Cerrar sesión",
    route: "/employee/login",
    role: [
      "Administrador",
      "Empleado"
    ],
    color: "hover:text-red-600 text-black"
  }
];
---
<header class="bg-black max-h-16 flex flex-row items-center justify-between text-white font-semibold px-4 py-2 text-2xl">
  <img src="/logo_bl.png" alt="Logo de Blackline" class="max-h-16 p-2">
  <nav class="flex flex-row gap-20">
    {
      ROUTES.map(({ name, route, color }) => (
        <a href={ route } class={ color }>{ name }</a>
      ))
    }
  </nav>
  <div class="relative inline-block text-left">
    <div>
      <button type="button" class="px-2 hover:text-[#6FD0DD]" id="menu-button" aria-expanded="true" aria-haspopup="true">
        {
          <p>{ employee.firstName } | { employee.role.name }</p>
        }
      </button>
    </div>
    <div id="coso" class="hidden absolute right-0 z-10 mt-5 w-80 origin-top-right rounded-md bg-[#DDDDDD] shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
      <nav class="flex flex-col gap-4 items-end p-4">
        {
          SIDE_MENU.map(({ name, route, role, color }) => (
            role.includes( employee.role.name ) && 
            <a href={ route } class={ color }>{ name }</a>
          ))
        }
      </nav>
    </div>
  </div>
</header>

<script>
  const button = document.querySelector('button');
  const coso = document.getElementById('coso');

  button.addEventListener('click', () => {
    coso.classList.toggle('hidden');
    button.classList.toggle('text-[#6FD0DD]');
  })

  const checkToken = () => {
    if(!localStorage.getItem('token')){
      location.href = '/employee/login'
    }

    fetch('https://api.blackonline.juanmbv.site/jwt/validate-token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }, body: JSON.stringify({token: localStorage.getItem('token')})
    }).then(res => {
      if(!res.ok){
        location.href = '/employee/login'
      }
    })
  }

  checkToken();

</script>